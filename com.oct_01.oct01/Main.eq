
/*
 * Main.eq
 * Generated by Eqela Studio 2.0b7.4
 */

public class Main: SEScene
{
	SESprite bg;
	SESprite fg;
	bool move_right=true;
	bool move_left=false;
	bool move_down=true;
	bool move_up=false;
	int speed;
	double rotation;
	SESprite text;
	int bounce=0; //para mabilang no of bounce
	String display; //check string operations api
	

	public void initialize(SEResourceCache rsc) { //came from api
		base.initialize(rsc);
		speed=100;
		rotation=0;
		
		bg= add_sprite_for_color(Color.instance("lightblue"),get_scene_width(),get_scene_height());
		bg.move(0,0);

	/*	fg= add_sprite_for_color(Color.instance("white"),get_scene_width()*0.1,get_scene_height()*0.1);
			uncomment mo to if color ang nagbbounce
**/

		rsc.prepare_image("my_image", "myimage", get_scene_width()*0.1, get_scene_height()*0.1); //prepared img, file name of img, size, size(width, height)
		fg=add_sprite_for_image(SEImage.for_resource("my_image"));//"prepared img"
		fg.move(100,100);

	
		rsc.prepare_font("myfont", "arial bold color=white", 40); //name of appearance,font requirements, size
		display= "BOUNCE = %d".printf().add(Primitive.for_integer(bounce)).to_string(); //check string operations api
		text = add_sprite_for_text(display,"myfont"); //laman ng display, name of apperance
		text.move(0,get_scene_height()-text.get_height()); //para mailagay sa lower left

		}//initialize




			public void update(TimeVal now, double delta) { //came from api

				speed+=50; //add for delay and speed
				rotation+=MathConstant.M_PI_4; //came from api (Math blah blah)
				fg.set_rotation(rotation);

		if(move_right) {
		fg.move(fg.get_x()+delta*speed,fg.get_y()); //constant is y
		
			if(fg.get_x()+fg.get_width() >  get_scene_width()) {
				move_right=false;
				move_left=true;
				speed=100; //insert for delay and speed
				bounce++;
			}
	
		}
		

		if(move_left) {
		fg.move(fg.get_x()-delta*speed,fg.get_y()); //constant is y
		
			if(fg.get_x()< 0) {
				move_right=true;
				move_left=false;
				speed=100;  //insert for delay and speed
				bounce++;
			}
			
		}


	
		if(move_down) {
		fg.move(fg.get_x(),fg.get_y()+delta*speed); //constant is x
		
			if(fg.get_y()+fg.get_height() >  get_scene_height()) {
				move_down=false;
				move_up=true;
				speed=100;  //insert for delay and speed
				bounce++;
			}
			
		}
		

		if(move_up) {
		fg.move(fg.get_x(),fg.get_y()-delta*speed); //constant is x
		
			if(fg.get_y()< 0) {
				move_down=true;
				move_up=false;
				speed=100;  //insert for delay and speed
				bounce++;
			}
			
		}
			display= "BOUNCE = %d".printf().add(Primitive.for_integer(bounce)).to_string(); //check string operations api
			text.set_text(display);	


}//update		


		public void set_rotation(double angle) {
			rotation = angle;
	
		}

		public double get_rotation() {
			return(rotation);
		}
	


}//class

